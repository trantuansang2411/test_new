name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        node-version: [22.x]
        service: [auth, product]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./${{ matrix.service }}
      run: |
        echo "Installing dependencies for ${{ matrix.service }}"
        npm ci

    # ‚úÖ N·∫øu service l√† "auth" ‚Üí ch·∫°y test b√¨nh th∆∞·ªùng
    - name: Run tests (Auth)
      if: matrix.service == 'auth'
      working-directory: ./auth
      env:
        MONGODB_AUTH_URI: ${{ secrets.MONGODB_AUTH_URI }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: npm test

    # ‚úÖ N·∫øu service l√† "product" ‚Üí kh·ªüi ch·∫°y Auth service tr∆∞·ªõc
    - name: Start Auth service
      if: matrix.service == 'product'
      working-directory: ./auth
      env:
        MONGODB_AUTH_URI: ${{ secrets.MONGODB_AUTH_URI }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        echo "üöÄ Starting Auth service in background..."
        nohup npm start > ../auth.log 2>&1 &
        sleep 5
        echo "‚úÖ Auth service started."

    # ‚úÖ Ki·ªÉm tra Auth service ƒë√£ s·∫µn s√†ng b·∫±ng curl
    - name: Verify Auth service ready
      if: matrix.service == 'product'
      run: |
        echo "üïí Checking Auth service readiness..."
        for i in {1..10}; do
          if curl -s -X POST http://localhost:3000/login \
            -H "Content-Type: application/json" \
            -d '{"username":"'${{ secrets.LOGIN_TEST_USER }}'","password":"'${{ secrets.LOGIN_TEST_PASSWORD }}'"}' | grep -q "token"; then
            echo "‚úÖ Auth service is ready."
            exit 0
          fi
          echo "Waiting for Auth service... ($i/10)"
          sleep 3
        done
        echo "‚ùå Auth service did not respond in time." >&2
        cat ../auth.log || true
        exit 1

    # ‚úÖ Ch·∫°y test cho Product service (c√≥ g·ªçi Auth th·∫≠t)
    - name: Run tests (Product)
      if: matrix.service == 'product'
      working-directory: ./product
      env:
        MONGODB_PRODUCT_URI: ${{ secrets.MONGODB_PRODUCT_URI }}
        RABBITMQ_URI: ${{ secrets.RABBITMQ_URI || 'amqp://guest:guest@localhost:5672' }}
        RABBITMQ_QUEUE_PRODUCT: ${{ secrets.RABBITMQ_QUEUE_PRODUCT || 'product_queue' }}
        RABBITMQ_QUEUE_ORDER: ${{ secrets.RABBITMQ_QUEUE_ORDER || 'order_queue' }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        LOGIN_TEST_USER: testuser
        LOGIN_TEST_PASSWORD: 123456
      run: |
        echo "üöÄ Running Product service tests..."
        npm test
